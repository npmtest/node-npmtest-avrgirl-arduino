{"/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/test.js":"/* istanbul instrument in package npmtest_avrgirl_arduino */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/lib.npmtest_avrgirl_arduino.js":"/* istanbul instrument in package npmtest_avrgirl_arduino */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_avrgirl_arduino = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_avrgirl_arduino = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-avrgirl-arduino && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_avrgirl_arduino */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_avrgirl_arduino\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_avrgirl_arduino.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_avrgirl_arduino.rollup.js'] =\n            local.assetsDict['/assets.npmtest_avrgirl_arduino.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_avrgirl_arduino.__dirname + '/lib.npmtest_avrgirl_arduino.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/avrgirl-arduino.js":"var boards = require('./boards');\nvar Connection = require('./lib/connection');\nvar protocols = require('./lib/protocols');\n\n/**\n * Constructor\n *\n * @param {object} opts - options for consumer to pass in\n */\nvar AvrgirlArduino = function(opts) {\n  opts = opts || {};\n\n  this.options = {\n    debug: opts.debug || false,\n    board: opts.board || 'uno',\n    port: opts.port || ''\n  };\n\n  // this here checks for 3 conditions:\n  // if debug option is simply true, we want to fall back to default debug function\n  // if a custom debug function is passed in, we want to assign debug to be that\n  // if debug option is false, then run debug as a no-op\n  if (this.options.debug === true) {\n    this.debug = console.log.bind(console);\n  } else if (typeof this.options.debug === 'function') {\n    this.debug = this.options.debug;\n  } else {\n    this.debug = function() {};\n  }\n\n  if (typeof this.options.board === 'string') {\n    this.options.board = boards.byName[this.options.board];\n  } else if (typeof this.options.board === 'object') {\n    this.options.board = this.options.board;\n  }\n\n  this.connection = new Connection(this.options);\n\n  if (this.options.board) {\n    var Protocol = protocols[this.options.board.protocol] || function() {};\n\n    this.protocol = new Protocol({\n      board: this.options.board,\n      connection: this.connection,\n      debug: this.debug\n    });\n  }\n};\n\n/**\n * Validates the board properties\n *\n * @param {function} callback - function to run upon completion/error\n */\nAvrgirlArduino.prototype._validateBoard = function(callback) {\n  if (typeof this.options.board !== 'object') {\n    // cannot find a matching board in supported list\n    return callback(new Error('\"' + this.options.board + '\" is not a supported board type.'));\n\n  } else if (!this.protocol.chip) {\n    // something went wrong trying to set up the protocol\n    var errorMsg = 'not a supported programming protocol: ' + this.options.board.protocol;\n    return callback(new Error(errorMsg));\n\n  } else if (!this.options.port && this.options.board.name === 'pro-mini') {\n    // when using a pro mini, a port is required in the options\n    return callback(new Error('using a pro-mini, please specify the port in your options.'));\n\n  } else {\n    // all good\n    return callback(null);\n  }\n};\n\n/**\n * Public method for flashing a hex file to the main program allocation of the Arduino\n *\n * @param {string} file - path to hex file for uploading\n * @param {function} callback - function to run upon completion/error\n */\nAvrgirlArduino.prototype.flash = function(file, callback) {\n  var _this = this;\n\n  // validate board properties first\n  _this._validateBoard(function(error) {\n    if (error) { return callback(error); }\n\n    // set up serialport connection\n    _this.connection._init(function(error) {\n      if (error) { return callback(error); }\n\n      // upload file to board\n      _this.protocol._upload(file, callback);\n    });\n  });\n};\n\n/**\n * Return a list of devices on serial ports. In addition to the output provided\n * by SerialPort.list, it adds a platform independent PID in _pid\n *\n * @param {function} callback - function to run upon completion/error\n */\nAvrgirlArduino.prototype.listPorts = AvrgirlArduino.listPorts =\nAvrgirlArduino.prototype.list = AvrgirlArduino.list = function(callback) {\n  return Connection.prototype._listPorts(callback);\n};\n\nmodule.exports = AvrgirlArduino;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/boards.js":"var boards = [\n  {\n    name: 'uno',\n    baud: 115200,\n    signature: new Buffer([0x1e, 0x95, 0x0f]),\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x0043', '0x7523', '0x0001', '0xea60'],\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'micro',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x0037', '0x8037', '0x0036', '0x0237'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'imuduino',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x0036', '0x8037', '0x8036'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'leonardo',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x0036', '0x8036', '0x800c'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'arduboy',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x0036', '0x8036', '0x800c'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'feather',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x800c', '0x000c'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'little-bits',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x0036', '0x8036'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'blend-micro',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x2404'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'nano',\n    baud: 57600,\n    signature: new Buffer([0x1e, 0x95, 0x0f]),\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6001', '0x7523'],\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'duemilanove168',\n    baud: 19200,\n    signature: new Buffer([0x1e, 0x94, 0x06]),\n    pageSize: 128,\n    numPages: 128,\n    timeout: 400,\n    productId: ['0x6001'],\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'tinduino',\n    baud: 57600,\n    signature: new Buffer([0x1e, 0x95, 0x0f]),\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6015'],\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'bqZum',\n    baud: 19200,\n    signature: new Buffer([0x1e, 0x95, 0x0f]),\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6001', '0x7523'],\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'mega',\n    baud: 115200,\n    signature: new Buffer([0x1e, 0x98, 0x01]), // ATmega2560\n    pageSize: 256,\n    delay1: 10,\n    delay2: 1,\n    timeout:0xc8,\n    stabDelay:0x64,\n    cmdexeDelay:0x19,\n    synchLoops:0x20,\n    byteDelay:0x00,\n    pollValue:0x53,\n    pollIndex:0x03,\n    productId: ['0x0042', '0x6001', '0x0010', '0x7523'],\n    protocol: 'stk500v2'\n  },\n  {\n    name: 'adk',\n    baud: 115200,\n    signature: new Buffer([0x1e, 0x98, 0x01]), // ATmega2560\n    pageSize: 256,\n    delay1: 10,\n    delay2: 1,\n    timeout:0xc8,\n    stabDelay:0x64,\n    cmdexeDelay:0x19,\n    synchLoops:0x20,\n    byteDelay:0x00,\n    pollValue:0x53,\n    pollIndex:0x03,\n    productId: ['0x0044', '0x6001', '0x003F'],\n    protocol: 'stk500v2'\n  },\n  {\n    name: 'sf-pro-micro',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x9206'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'pro-mini',\n    baud: 57600,\n    signature: new Buffer([0x1e, 0x95, 0x0f]),\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'qduino',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x516d'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'pinoccio',\n    baud: 115200,\n    signature: new Buffer([0x1e, 0xa8, 0x02]), // ATmega256RFR2\n    pageSize: 256,\n    delay1: 10,\n    delay2: 1,\n    timeout:0xc8,\n    stabDelay:0x64,\n    cmdexeDelay:0x19,\n    synchLoops:0x20,\n    byteDelay:0x00,\n    pollValue:0x53,\n    pollIndex:0x03,\n    productId: ['0x6051'],\n    protocol: 'stk500v2'\n  },\n  {\n    name: 'lilypad-usb',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x9207', '0x9208', '0x1B4F'],\n    protocol: 'avr109'\n  },\n  {\n    name: 'yun',\n    baud: 57600,\n    signature: new Buffer([0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e]),\n    productId: ['0x0041', '0x8041'],\n    protocol: 'avr109'\n  },\n];\n\n/**\n * Generate an object with board name keys for faster lookup\n * @return {object} byBoardName\n */\nfunction boardLookupTable() {\n  var byBoard = {};\n  for (var i = 0; i < boards.length; i++) {\n    var currentBoard = boards[i];\n    byBoard[currentBoard.name] = currentBoard;\n  }\n  return byBoard;\n}\n\nmodule.exports = {\n  byName: boardLookupTable()\n}\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/connection.js":"var Serialport = require('serialport');\nvar async = require('async');\nvar awty = require('awty');\n\nvar Connection = function(options) {\n  this.options = options;\n  this.debug = this.options.debug ? console.log.bind(console) : function() {};\n\n  this.board = this.options.board;\n};\n\nConnection.prototype._init = function(callback) {\n  var _this = this;\n\n  // check for port\n  if (!_this.options.port) {\n    // no port, auto sniff for the correct one\n    _this._sniffPort(function(error, port) {\n      if (port.length) {\n        // found a port, save it\n        _this.options.port = port[0].comName;\n\n        _this.debug('found ' + _this.options.board.name + ' on port ' + _this.options.port);\n\n        // set up serialport for it\n        _this._setUpSerial(function(error) {\n          return callback(error);\n        });\n      } else {\n        // we didn't find the board\n        return callback(new Error('no Arduino ' + '\\'' + _this.options.board.name + '\\'' + ' found.'));\n      }\n    });\n\n  } else {\n    // when a port is manually specified\n    _this._setUpSerial(function(error) {\n      return callback(error);\n    });\n  }\n};\n\n/**\n * Create new serialport instance for the Arduino board, but do not immediately connect.\n */\nConnection.prototype._setUpSerial = function(callback) {\n  this.serialPort = new Serialport(this.options.port, {\n    baudRate: this.board.baud,\n    autoOpen: false\n  });\n  return callback(null);\n};\n\n/**\n * Finds a list of available USB ports, and matches for the right pid\n * Auto finds the correct port for the chosen Arduino\n *\n * @param {function} callback - function to run upon completion/error\n */\nConnection.prototype._sniffPort = function(callback) {\n  var _this = this;\n  var pidList = _this.board.productId.map(function(id) {\n    return parseInt(id, 16);\n  });\n\n  _this._listPorts(function(error, ports) {\n    // filter for a match by product id\n    var portMatch = ports.filter(function(p) {\n      return pidList.indexOf(parseInt(p._standardPid, 16)) !== -1;\n    });\n\n    return callback(null, portMatch);\n  });\n};\n\n/**\n * Sets the DTR/RTS lines to either true or false\n *\n * @param {boolean} bool - value to set DTR and RTS to\n * @param {number} timeout - number in milliseconds to delay after\n * @param {function} callback - function to run upon completion/error\n */\nConnection.prototype._setDTR = function(bool, timeout, callback) {\n  var _this = this;\n  var props = {\n    rts: bool,\n    dtr: bool\n  };\n\n  _this.serialPort.set(props, function(error) {\n    if (error) { return callback(error); }\n\n    setTimeout(function() {\n      callback(error);\n    }, timeout);\n  });\n};\n\n/**\n * Checks the list of ports 4 times for a device to show up\n *\n * @param {function} callback - function to run upon completion/error\n */\nConnection.prototype._pollForPort = function(callback) {\n  var _this = this;\n\n  var poll = awty(function(next) {\n    var found = false;\n\n    // try to sniff port instead (for port hopping devices)\n    _this._sniffPort(function(error, port) {\n      if (port.length) {\n        // found a port, save it\n        _this.options.port = port[0].comName;\n        found = true;\n      }\n\n      next(found);\n    });\n  });\n\n  poll.every(100).ask(15);\n\n  poll(function(foundPort) {\n    if (foundPort) {\n      // set up serialport for it\n      _this._setUpSerial(function(error) {\n        return callback(error);\n      });\n    } else {\n      // we also could not find the device on auto sniff\n      return callback(new Error('could not reconnect after resetting board.'));\n    }\n  });\n};\n\nConnection.prototype._pollForOpen = function(callback) {\n  var _this = this;\n\n  var poll = awty(function(next) {\n    _this.serialPort.open(function(error) {\n      next(!error);\n    });\n  });\n\n  poll.every(100).ask(6);\n\n  poll(function(isOpen) {\n    var error;\n    if (!isOpen) {\n      error = new Error('could not open board on ' + _this.serialPort.path);\n    }\n\n    callback(error);\n  });\n};\n\n/**\n * Pulse the DTR/RTS lines low then high\n *\n * @param {function} callback - function to run upon completion/error\n */\nConnection.prototype._cycleDTR = function(callback) {\n  var _this = this;\n\n  async.series([\n    _this._setDTR.bind(_this, true, 250),\n    _this._setDTR.bind(_this, false, 50)\n  ],\n  function(error) {\n    return callback(error);\n  });\n\n};\n\n/**\n * Return a list of devices on serial ports. In addition to the output provided\n * by SerialPort.list, it adds a platform independent PID in _pid\n *\n * @param {function} callback - function to run upon completion/error\n */\nConnection.prototype._listPorts = function(callback) {\n  var foundPorts = [];\n\n  // list all available ports\n  Serialport.list(function(err, ports) {\n    if (err) { return callback(err); }\n\n    // iterate through ports\n    for (var i = 0; i < ports.length; i += 1) {\n      var pid;\n\n      // are we on windows or unix?\n      if (ports[i].productId) {\n        pid = ports[i].productId;\n      } else if (ports[i].pnpId) {\n        try {\n          pid = '0x' + /PID_\\d*/.exec(ports[i].pnpId)[0].substr(4);\n        } catch (err) {\n          pid = '';\n        }\n      } else {\n        pid = '';\n      }\n\n      ports[i]._standardPid = pid;\n      foundPorts.push(ports[i]);\n    }\n\n    return callback(null, foundPorts);\n  });\n};\n\nmodule.exports = Connection;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/protocols.js":"module.exports = {\n  stk500v1: require('./stk500v1'),\n  stk500v2: require('./stk500v2'),\n  avr109: require('./avr109')\n};\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/stk500v1.js":"var STK = require('stk500');\nvar colors = require('colors');\nvar tools = require('./tools');\nvar Protocol = require('./protocol');\nvar util = require('util');\n\nvar Stk500v1 = function(options) {\n  options.protocol = STK;\n  Protocol.call(this, options);\n};\n\nutil.inherits(Stk500v1, Protocol);\n\n/**\n * Uploads the provided hex file to the board, via the stk500v1 protocol\n *\n * @param {string} file - path to hex file for uploading\n * @param {function} callback - function to run upon completion/error\n */\nStk500v1.prototype._upload = function(file, callback) {\n  var _this = this;\n\n  this.serialPort = this.connection.serialPort;\n\n  // open/parse supplied hex file\n  var hex = tools._parseHex(file);\n  if (!Buffer.isBuffer(hex)) {\n    return callback(hex);\n  }\n\n  // open connection\n  _this.serialPort.open(function(error) {\n    if (error) { return callback(error); }\n\n    _this.debug('connected');\n\n    // reset\n    _this._reset(function(error) {\n      if (error) { return callback(error); }\n\n      _this.debug('flashing, please wait...');\n\n      // flash\n      _this.chip.bootload(_this.serialPort, hex, _this.board, function(error) {\n        var color = (error ? colors.red : colors.green);\n\n        _this.debug(color('flash complete.'));\n\n        // Always close the serialport\n        _this.serialPort.close();\n\n        return callback(error);\n      });\n    });\n  });\n};\n\nStk500v1.prototype._reset = function(callback) {\n  var _this = this;\n\n  _this.connection._setDTR(true, 250, function(error) {\n    if (!error) {\n      _this.debug('reset complete.');\n    }\n\n    return callback(error);\n  });\n};\n\nmodule.exports = Stk500v1;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/tools.js":"var fs = require('graceful-fs');\nvar intelhex = require('intel-hex');\n\nvar tools = {};\n\n/**\n * Opens and parses a given hex file\n */\ntools._parseHex = function(file) {\n  try {\n    var data;\n    if (typeof file === 'string') {\n      data = fs.readFileSync(file, {\n        encoding: 'utf8'\n      });\n    } else {\n      data = file;\n    }\n\n    return intelhex.parse(data).data;\n  } catch (error) {\n    return error;\n  }\n};\n\nmodule.exports = tools;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/protocol.js":"/**\n * Generic Protocol for other protocols to inherit from\n *\n */\nvar Protocol = function(options) {\n  this.debug = options.debug;\n\n  this.board = options.board;\n  this.connection = options.connection;\n\n  this.chip = new options.protocol({ quiet: true });\n};\n\n/**\n * Resets an Arduino STK500 bootloaded chip by pulsing DTR high.\n *\n * Avoids the dreaded timeout bug if the serialport was opened since the device\n * was powered.\n *\n * @param {function} callback - function to run upon completion/error\n */\nProtocol.prototype._reset = function(callback) {\n  var _this = this;\n\n  // cycle DTR/RTS from low to high\n  _this.connection._cycleDTR(function(error) {\n    if (!error) {\n      _this.debug('reset complete.');\n    }\n\n    return callback(error);\n  });\n};\n\nmodule.exports = Protocol;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/stk500v2.js":"var STK2 = require('stk500-v2');\nvar async = require('async');\nvar colors = require('colors');\nvar tools = require('./tools');\nvar Protocol = require('./protocol');\nvar util = require('util');\n\nvar Stk500v2 = function(options) {\n  options.protocol = function() { return STK2; };\n\n  Protocol.call(this, options);\n};\n\nutil.inherits(Stk500v2, Protocol);\n\n/**\n * Uploads the provided hex file to the board, via the stk500v2 protocol\n *\n * @param {buffer} hex - buffer of hex file for uploading\n * @param {function} callback - function to run upon completion/error\n */\nStk500v2.prototype._upload = function(file, callback) {\n  var _this = this;\n\n  // open/parse supplied hex file\n  _this.serialPort = _this.connection.serialPort;\n\n  var hex = tools._parseHex(file);\n  if (!Buffer.isBuffer(hex)) {\n    return callback(hex);\n  }\n\n  // open connection\n  _this.serialPort.open(function(error) {\n    if (error) { return callback(error); }\n\n    _this.debug('connected');\n\n    // instantiate stk500v2 with newly open serialport\n    var chip = _this.chip(_this.serialPort);\n\n    async.series([\n      _this._reset.bind(_this),\n      chip.sync.bind(chip, 5),\n      chip.verifySignature.bind(chip, _this.board.signature),\n      chip.enterProgrammingMode.bind(chip, _this.board),\n      function debugLog(callback) {\n        _this.debug('flashing, please wait...');\n        callback(null);\n      },\n\n      chip.upload.bind(chip, hex, _this.board.pageSize),\n      chip.exitProgrammingMode.bind(chip)\n    ],\n    function(error) {\n      var color = (error ? colors.red : colors.green);\n      _this.debug(color('flash complete.'));\n\n      // Always close the serialport\n      _this.serialPort.close();\n\n      return callback(error);\n    });\n  });\n};\n\nmodule.exports = Stk500v2;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/avr109.js":"var AVR109 = require('chip.avr.avr109');\nvar colors = require('colors');\nvar fs = require('graceful-fs');\nvar Serialport = require('serialport');\nvar async = require('async');\nvar Protocol = require('./protocol');\nvar util = require('util');\n\nvar Avr109 = function(options) {\n  options.protocol = function() { return AVR109; };\n\n  Protocol.call(this, options);\n};\n\nutil.inherits(Avr109, Protocol);\n\n/**\n * Uploads the provided hex file to the board, via the AVR109 protocol\n *\n * @param {string, Buffer} hex - path of hex file for uploading, or Buffer of the hex data\n * @param {function} callback - function to run upon completion/error\n */\nAvr109.prototype._upload = function(file, callback) {\n  var _this = this;\n  var data;\n\n  try {\n    if (typeof file === 'string') {\n      data = fs.readFileSync(file, {\n        encoding: 'utf8'\n      });\n    } else {\n      data = file;\n    }\n  } catch (error) {\n    return callback(error);\n  }\n\n  _this._reset(function(error) {\n    if (error) { return callback(error); }\n\n    _this.debug('reset complete.');\n\n    _this.connection._pollForOpen(function(error) {\n      if (error) { return callback(error); }\n\n      _this.debug('connected');\n\n      _this._write(data, function(error) {\n        var color = (error ? colors.red : colors.green);\n        _this.debug(color('flash complete.'));\n\n        // Can't close the serialport on avr109 boards >> node-serialport/issues/415\n        // _this.serialPort.close();\n\n        return callback(error);\n      });\n    });\n  });\n};\n\n/**\n * Performs the writing part of uploading to an AVR109 bootloaded chip\n *\n * @param {buffer} data - hex buffer to write to the chip\n * @param {function} callback - function to run upon completion/error\n */\nAvr109.prototype._write = function(data, callback) {\n  var _this = this;\n\n  var options = {\n    signature: _this.board.signature.toString(),\n    debug: false\n  };\n\n  _this.chip.init(_this.connection.serialPort, options, function(error, flasher) {\n    if (error) { return callback(error); }\n\n    _this.debug('flashing, please wait...');\n\n    async.series([\n      flasher.erase.bind(flasher),\n      flasher.program.bind(flasher, data.toString()),\n      function verify(done) {\n        flasher.verify(done);\n      },\n\n      flasher.fuseCheck.bind(flasher)\n    ],\n    function(error) {\n      return callback(error);\n    });\n  });\n};\n\n/**\n * Software resets an Arduino AVR109 bootloaded chip into bootloader mode\n *\n * @param {function} callback - function to run upon completion/error\n */\nAvr109.prototype._reset = function(callback) {\n  var _this = this;\n  var conn;\n\n  // creating a temporary connection for resetting only\n  var tempSerialPort = new Serialport(_this.connection.options.port, {\n    baudRate: 1200,\n    autoOpen: false\n  });\n\n  _this.connection.serialPort = tempSerialPort;\n  conn = _this.connection;\n\n  _this.debug('resetting board...');\n\n  _this.connection.serialPort.once('close', function() {\n    async.series([\n      conn._setUpSerial.bind(conn),\n      conn._pollForPort.bind(conn)\n    ],\n    function(error) {\n      return callback(error);\n    });\n  });\n\n  async.series([\n    tempSerialPort.open.bind(tempSerialPort),\n    conn._cycleDTR.bind(conn)\n  ],\n  function(error) {\n    if (error) {\n      return callback(error);\n    }\n  });\n};\n\nmodule.exports = Avr109;\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/gulpfile.js":"var gulp = require('gulp');\nvar tape = require('gulp-tape');\nvar tapSpec = require('tap-spec');\nvar jscs = require('gulp-jscs');\nvar jshint = require('gulp-jshint');\nvar stylish = require('jshint-stylish');\n\ngulp.task('spec', function() {\n  return gulp.src(['tests/*.spec.js'])\n    .pipe(tape({\n      reporter: tapSpec()\n    }));\n});\n\ngulp.task('jscs', function() {\n  return gulp.src(['tests/*.spec.js', 'tests/helpers/*.js', 'avrgirl-arduino.js', 'lib/*.js'], { base: \"./\" })\n    .pipe(jscs({fix: true}))\n    .pipe(gulp.dest('.'))\n    .pipe(jscs.reporter())\n    .pipe(jscs.reporter('fail'))\n});\n\ngulp.task('lint', function() {\n  return gulp.src(['tests/*.spec.js', 'tests/helpers/*.js', 'avrgirl-arduino.js', 'lib/*.js'])\n    .pipe(jshint())\n    .pipe(jshint.reporter('jshint-stylish'))\n    .pipe(jshint.reporter('fail'));\n});\n\ngulp.task('test', ['spec', 'lint']);\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/bin/cli.js":"#!/usr/bin/env node\nvar Avrgirl = require('../avrgirl-arduino');\nvar boards = require('../boards');\nvar parseArgs = require('minimist');\nvar path = require('path');\nvar child = require('child_process');\nvar testPilot = require('../lib/test-pilot-checker');\n\nvar args = (process.argv.slice(2));\nvar argv = parseArgs(args, {});\nvar userAction = argv._[0];\nvar help = 'Usage:\\n' +\n  '  avrgirl-arduino flash -f <file> -a <arduino name> [-p <port>] [-v]\\n' +\n  '  avrgirl-arduino boards\\n' +\n  '  avrgirl-arduino list\\n' +\n  '  avrgirl-arduino test-pilot';\n\nfunction showHelp() {\n  console.log(help);\n}\n\nfunction flash(file, options) {\n  var avrgirl = new Avrgirl(options);\n  var filepath = path.resolve(process.cwd(), file);\n\n  avrgirl.flash(filepath, function(error) {\n    if (error) {\n      console.error(error);\n      process.exit(1);\n    }\n  });\n}\n\nfunction handleInput(action, argz) {\n  switch (action) {\n    case 'flash': {\n      if (!argz.f || !argz.a) {\n        showHelp();\n        process.exit(1);\n      } else if (!boards.byName[argz.a]) {\n        console.error(new Error('Oops! That board is not supported, sorry.'));\n        process.exit(1);\n      } else {\n        // run flash function here if all is well\n        var options = {\n          board: argz.a,\n          port: argz.p || '',\n          debug: argz.v || false\n        };\n\n        flash(argz.f, options);\n      }\n\n      break;\n    }\n\n    case 'boards': {\n      var boardNames = Object.keys(boards.byName).sort();\n      console.log('Supported Boards:\\n - ' + boardNames.join('\\n - '));\n      break;\n    }\n\n    case 'list': {\n      Avrgirl.listPorts(function(err, ports) {\n        console.log(ports);\n      });\n\n      break;\n    }\n\n    case 'help': {\n      showHelp();\n      process.exit();\n      break;\n    }\n\n    case 'test-pilot': {\n      console.log('running preflight check...');\n      testPilot.checkForInstall(function(err, isInstalled) {\n        if (isInstalled) {\n          testPilot.run();\n        } else {\n          console.log('installing test pilot, won\\'t be long...');\n          testPilot.install(function(err) {\n            if (err) {\n              var msg = err;\n              if (err.code === 'EACCES' || err.code === 'EPERM') {\n                msg = new Error('Oops! We ran into a permissions issue... you might want to check out this resource https://docs.npmjs.com/getting-started/fixing-npm-permissions');\n              }\n              return console.log(msg);\n            } else {\n              testPilot.run();\n            }\n          });\n        }\n      });\n      break;\n    }\n\n    default: {\n      // Invalid or no argument specified, show help and exit with an error status\n      showHelp();\n      process.exit(9);\n      break;\n    }\n  }\n}\n\nhandleInput(userAction, argv);\n","/home/travis/build/npmtest/node-npmtest-avrgirl-arduino/node_modules/avrgirl-arduino/lib/test-pilot-checker.js":"var child = require('child_process');\nvar path = require('path');\n\nmodule.exports.checkForInstall = function(callback) {\n  child.exec('npm ls --json', {cwd: __dirname}, function(error, stdout) {\n    if (error) return callback(error);\n    return callback(null, !!JSON.parse(stdout).dependencies['avrga-tester']);\n  });\n};\n\nmodule.exports.install = function(callback) {\n  child.exec('npm install avrga-tester', {cwd: __dirname}, function(error) {\n    return callback(error);\n  });\n};\n\nmodule.exports.run = function() {\n  var tp = child.exec('node ' + path.join(__dirname, '..', 'tests', 'test-pilot.js'), function(error) {\n    console.log(error);\n  });\n  tp.stdout.pipe(process.stdout);\n};\n"}